//示例程序
package main

import (
	"fmt"
	"go.dedis.ch/kyber/v3"
	"go.dedis.ch/kyber/v3/pairing/bn256"
	"go.dedis.ch/kyber/v3/sign/bls"
)

/*
[cipher package - crypto/cipher - Go Packages](https://pkg.go.dev/crypto/cipher#Stream)
// 初始化一个随机流作为 cipher.Stream
func newRandomStream() cipher.Stream {
	// 生成一个随机的 32 字节密钥
	key := make([]byte, 32)
	if _, err := rand.Read(key); err != nil {
		panic(fmt.Sprintf("Failed to generate random AES key: %v", err))
	}

	// 使用 AES 加密构造一个 Block
	block, err := aes.NewCipher(key)
	if err != nil {
		panic(fmt.Sprintf("Failed to create AES cipher: %v", err))
	}

	// 生成一个随机的 IV (Initialization Vector)
	iv := make([]byte, aes.BlockSize)
	if _, err := rand.Read(iv); err != nil {
		panic(fmt.Sprintf("Failed to generate random IV: %v", err))
	}

	// 使用 CTR 模式构造随机流
	return cipher.NewCTR(block, iv)
}
*/

func main() {
	// 使用 Kyber 提供的 BLS 实现，基于 bn256 pairing 曲线
	suite := bn256.NewSuite()

	// 签署人数量
	numSigners := 3

	// 初始化随机流
	//randomStream := newRandomStream()
	randomStream := suite.RandomStream()

	// 生成密钥对
	privateKeys := make([]kyber.Scalar, numSigners)
	publicKeys := make([]kyber.Point, numSigners)
	for i := 0; i < numSigners; i++ {
		sk, pk := bls.NewKeyPair(suite, randomStream)
		privateKeys[i] = sk
		publicKeys[i] = pk
	}

	// 要签名的消息
	message := []byte("Hello, Kyber BLS Multi-Signature!")

	// 每个签署人对消息签名
	signatures := make([][]byte, numSigners)
	for i := 0; i < numSigners; i++ {
		sig, err := bls.Sign(suite, privateKeys[i], message)
		if err != nil {
			panic(fmt.Sprintf("Failed to sign message: %v", err))
		}
		signatures[i] = sig
		fmt.Printf("Signature %d: %x\n", i+1, sig)
	}

	// 聚合签名
	aggSig, err := bls.AggregateSignatures(suite, signatures...)
	if err != nil {
		panic(fmt.Sprintf("Failed to aggregate signatures: %v", err))
	}
	fmt.Printf("Aggregate Signature: %x\n", aggSig)

	// 聚合公钥
	aggPubKey := bls.AggregatePublicKeys(suite, publicKeys...)
	fmt.Printf("Aggregate Public Key: %v\n", aggPubKey)

	// 验证聚合签名
	err = bls.Verify(suite, aggPubKey, message, aggSig)
	if err != nil {
		fmt.Println("Aggregate signature verification failed:", err)
	} else {
		fmt.Println("Aggregate signature is valid!")
	}
}
